(* vim: set filetype=sml: *)
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program 
  | decs | dec 
  | tydec | vardec | fundec
  | ty | tyfields | tyfields_rest
  | lvalue
  | exp_rest
  | unit
  | arith_exp
  | exp_comma_rest
  | funcall

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp ()

decs : decs dec ()

dec
  : tydec () 
  | vardec ()
  | fundec ()

tydec : TYPE ID EQ ty          ()

ty
  : ID                        ()
  | LBRACE tyfields RBRACE    ()
  | ARRAY OF ID               ()

tyfields
  :                                    ()
  | ID COLON ID tyfields_rest          ()

tyfields_rest
  :                                    ()
  | COMMA ID COLON ID                  ()

vardec
  : VAR ID ASSIGN exp                  ()
  | VAR ID COLON ID ASSIGN exp         ()

fundec
  : FUNCTION ID LPAREN tyfields RPAREN EQ exp       ()
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ()

exp
  : lvalue                       ()
  | NIL                          ()
  | LPAREN exp exp_rest RPAREN   () (* expression sequence *)
  | unit                         ()
  | INT                          ()
  | STRING                       ()
  | MINUS INT                    () (* negate *)
  | funcall                      ()
  | arith_exp                    ()
  | LPAREN exp RPAREN            ()

unit: LPAREN RPAREN              ()

funcall: ID LPAREN exp exp_comma_rest RPAREN ()

exp_comma_rest
  :                              ()
  | COMMA exp                    ()

exp_rest
  :                              ()
  | SEMICOLON exp                ()

arith_exp
  : INT PLUS INT                 ()
  | INT MINUS INT                ()
  | INT TIMES INT                () 
  | INT DIVIDE INT               ()

lvalue 
  : ID                           () 
  | lvalue DOT ID                () 
  | lvalue LBRACK exp RBRACK     ()
