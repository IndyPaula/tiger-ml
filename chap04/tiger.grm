(* vim: set filetype=sml: *)
structure A = Absyn

open Symbol

val todoExp = A.NilExp
val todoVar = A.SimpleVar((symbol ""), 0)
val todoExpPos = 0
val todoDec = A.FunctionDec []

fun i(i: int) = A.IntExp(i)

fun simpleVar(id: string, pos: int) = A.SimpleVar((symbol id), pos)

fun negate(exp: A.exp, pos: int) = 
  A.OpExp({left = i(0), oper = A.MinusOp, right = exp, pos = pos})

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | AND | OR 
  | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  program of A.exp | exp of A.exp
  | decs of A.dec list | dec of A.dec
  | tydec of A.exp | vardec of A.exp | fundec of A.exp
  | ty of A.exp | tyfields of A.exp | tyfields_nonempty of A.exp | tyfield of A.exp
  | lvalue of A.var | unitexp of A.exp | arith_exp of A.exp | funcall of A.exp
  | comp_exp of A.exp | bool_exp of A.exp | record_create of A.exp | array_create of A.exp
  | record_create_list of A.exp | record_create_list_nonempty of A.exp | record_create_field of A.exp
  | expseq of A.exp
  | explist of A.exp list | explist_nonempty of A.exp list

%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program: exp                           (exp)

exp
  : lvalue                             (A.VarExp(lvalue))
  | NIL                                (A.NilExp)
  | unitexp                            (unitexp)
  | INT                                (A.IntExp INT)
  | STRING                             (A.StringExp(STRING, STRINGleft))
  | MINUS exp             %prec UMINUS (negate(exp, MINUSleft))
  | funcall                            (funcall)
  | arith_exp                          (arith_exp)
  | comp_exp                           (comp_exp)
  | bool_exp                           (bool_exp)
  | record_create                      (record_create)
  | array_create                       (array_create)
  | lvalue ASSIGN exp                  (A.AssignExp {var=lvalue, exp=exp, pos=ASSIGNleft})
  | IF exp THEN exp ELSE exp           (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
  | IF exp THEN exp                    (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft})
  | WHILE exp DO exp                   (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
  | FOR ID ASSIGN exp TO exp DO exp    (A.ForExp {var=symbol ID, escape= ref true, lo=exp1, hi=exp2, 
                                                  body=exp3, pos=FORleft})
  | BREAK                              (A.BreakExp BREAKleft)
  | LET decs IN expseq END             (A.LetExp {decs=decs, body=expseq, pos=LETleft})
  | LPAREN expseq RPAREN               (expseq)

decs
  :                                    ([])
  | decs dec                           (decs @ [dec])

(*
and dec = FunctionDec of fundec list
        | VarDec of {name: symbol,
		     escape: bool ref,
		     typ: (symbol * pos) option,
		     init: exp,
		     pos: pos}
        | TypeDec of {name: symbol, ty: ty, pos: pos} list
*)
dec
  : tydec                     (todoDec) 
  | vardec                    (todoDec)
  | fundec                    (todoDec)

tydec: TYPE ID EQ ty          (todoExp)

ty
  : ID                        (todoExp)
  | LBRACE tyfields RBRACE    (todoExp)
  | ARRAY OF ID               (todoExp)

tyfield: ID COLON ID          (todoExp)

tyfields
  :                           (todoExp)
  | tyfields_nonempty         (todoExp)

tyfields_nonempty
  : tyfield                   (todoExp)
  | tyfields COMMA tyfield    (todoExp)

vardec
  : VAR ID ASSIGN exp                  (todoExp)
  | VAR ID COLON ID ASSIGN exp         (todoExp)

fundec
  : FUNCTION ID LPAREN tyfields RPAREN EQ exp       (todoExp)
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  (todoExp)

record_create
  : ID LBRACE record_create_list RBRACE      (todoExp)

record_create_list
  :                                          (todoExp)
  | record_create_list_nonempty              (todoExp)

record_create_list_nonempty
  : record_create_field                                      (todoExp)
  | record_create_list_nonempty COMMA record_create_field    (todoExp)

record_create_field: ID EQ exp         (todoExp)

array_create
  : ID LBRACK exp RBRACK OF exp        (todoExp)

expseq
  : exp                                (todoExp)
  | expseq SEMICOLON exp               (todoExp)

unitexp: LPAREN RPAREN                (A.NilExp)

funcall
  : ID LPAREN explist RPAREN     (A.CallExp {func=symbol ID, args=explist, pos=IDleft})

explist
  :                              ([])
  | explist_nonempty             (explist_nonempty)

explist_nonempty
  : exp                          ([exp])
  | explist COMMA exp            (explist @ [exp])
 
arith_exp
  : exp PLUS exp                 (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
  | exp MINUS exp                (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
  | exp TIMES exp                (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
  | exp DIVIDE exp               (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})

comp_exp
  : exp EQ exp                   (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
  | exp NEQ exp                  (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})
  | exp LT exp                   (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
  | exp LE exp                   (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})
  | exp GT exp                   (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
  | exp GE exp                   (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})

bool_exp
  : exp AND exp                  (todoExp)
  | exp OR exp                   (todoExp)

lvalue
  : ID                           (simpleVar(ID, IDleft))
  | ID LBRACK exp RBRACK         (A.SubscriptVar(simpleVar(ID, IDleft), exp, LBRACKleft))
    (* redundant rule to disambiguate with array-creation-expression *)
  | lvalue LBRACK exp RBRACK     (A.SubscriptVar(lvalue, exp, LBRACKleft))
  | lvalue DOT ID                (A.FieldVar(lvalue, (symbol ID), DOTleft))
